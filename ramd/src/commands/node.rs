use clap::Args;
use std::path::PathBuf;

#[derive(Clone, Debug, Args)]
pub struct NodeCmd {
    #[clap(flatten)]
    pub db: DbConfigs,

    #[clap(flatten)]
    pub network: NetworkConfigs,

    #[clap(flatten)]
    pub node: NodeConfigs,

    #[clap(flatten)]
    pub rpc: RpcConfigs,

    #[clap(flatten)]
    pub tracing: TracingConfigs,
}

#[derive(Clone, Debug, Args)]
pub struct DbConfigs {
    /// Path for rocks db file
    #[clap(long, default_value = "db/ramd.db")]
    db_rocks_path: Option<PathBuf>,
}

#[derive(Clone, Debug, Args)]
pub struct NetworkConfigs {
    /// List of boot nodes to join the network
    #[clap(long)]
    network_boot_nodes: Option<Vec<String>>,

    /// Path for network related files
    #[clap(long, default_value = "network/")]
    network_config_path: PathBuf,

    /// Seconds until an idle connection timeout
    #[clap(long, default_value_t = 60)]
    network_idle_connection_timeout: u64,

    /// Path for libp2p secret key
    #[clap(long)]
    network_key: Option<PathBuf>,

    /// Maximum number of peers allowed
    #[clap(long, default_value_t = 10)]
    network_max_peers_limit: usize,

    /// Port for libp2p
    #[clap(long, default_value_t = 1211)]
    network_port: u16,
}

#[derive(Clone, Debug, Args)]
pub struct NodeConfigs {
    /// Config file for ramd (relative with `ramd_dir_name`)
    #[clap(long, default_value = "config/ramd.toml")]
    ramd_config_file: PathBuf,

    /// Directory for all ramd fs files
    #[clap(long, default_value = "$HOME/.ramd/")]
    ramd_dir_name: PathBuf,
}

#[derive(Clone, Debug, Args)]
pub struct RpcConfigs {
    /// Port for JSON RPC Server
    #[clap(long, default_value_t = 1319)]
    json_rpc_port: u16,
}

#[derive(Clone, Debug, Args)]
pub struct TracingConfigs {
    /// Maximum number of files generated by the logger
    #[clap(long, default_value_t = 5)]
    pub tracing_max_files: usize,

    /// Maximum file size
    #[clap(long, default_value_t = 200)]
    pub tracing_max_size_bytes: u64,

    /// Path for the log file (relative with `ramd_dir_name`)
    #[clap(long, default_value = "logs/ramd.log")]
    pub tracing_path: PathBuf,
}
